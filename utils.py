CIPHERTEXT = [9, 12, 6, 28, 1, 18, 29, 14, 1, 25, 24, 17, 22, 28, 17, 29, 16, 5, 9, 26, 27,
4, 29, 13, 2, 20, 5, 11, 4, 5, 9, 17, 26, 3, 20, 16, 32, 23, 16, 7, 22, 1, 22,
20, 16, 24, 30, 7, 3, 17, 2, 27, 7, 8, 21, 8, 15, 3, 5, 20, 32, 3, 27, 32, 32,
22, 6, 8, 24, 10, 15, 25, 7, 24, 17, 7, 10, 29, 9, 22, 32, 31, 20, 3, 9, 29, 6,
15, 21, 13, 18, 8, 12, 12, 15, 6, 6, 7, 11, 7, 20, 2, 31, 6, 18, 1, 17, 21, 32,
6, 8, 6, 21, 6, 14, 23, 3, 12, 23, 8, 4, 26, 7, 26, 10, 5, 9, 26, 20, 20, 18,
12, 17, 14, 5, 21, 4, 16, 30, 30, 18, 28, 21, 20, 18, 10, 17, 9, 26, 15, 32,
6, 1, 3, 20, 15, 4, 7, 28, 12, 31, 23, 17, 10, 15, 29, 28, 22, 2, 29, 16, 6, 8,
12, 29, 2, 30, 20, 1, 4, 24, 27, 12, 24, 14, 26, 29, 14, 31, 14, 11, 15, 6,
14, 14, 14, 3, 31, 24, 11, 32, 25, 29, 20, 26, 27, 10, 7, 24, 29, 31, 2, 5,
29, 32, 21, 11, 9, 7, 29, 20, 24, 26, 28, 14, 19, 21, 23, 17, 2, 14, 21, 3,
24, 16, 28, 25, 31, 27, 16, 19, 15, 23, 17, 21, 26, 23, 3, 24, 20, 18, 28,
32, 2, 9, 8, 3, 21, 18, 13, 7, 30, 12, 5, 16, 14, 12, 3, 2, 23, 29, 7, 23, 5,
25, 24, 26, 5, 9, 19, 24, 12, 28, 32, 1, 28, 8, 29, 14, 26, 5, 21, 10, 1, 13,
17, 18, 21, 28, 21, 8, 7, 12, 24, 6, 24, 18, 16, 10, 23, 29, 20, 16, 11, 14,
6, 30, 7, 32, 16, 15, 19, 13, 32, 1, 20, 3, 22, 23, 8, 6, 9, 30, 22, 2, 13, 8,
11, 21, 17, 20, 31, 4, 22, 31, 5, 21, 19, 29, 25, 1, 13, 22, 29, 27, 15, 28,
10, 8, 28, 27, 22, 7, 8, 28, 7, 12, 3, 27, 19, 30, 10, 10, 19, 4, 1, 3, 1, 6,
31, 21, 19, 8, 31, 21, 12, 31, 18, 6, 15, 24, 18, 26, 25, 27, 9, 15, 25, 1, 1,
24, 28, 22, 24, 1, 2, 3, 6, 7, 27, 2, 9, 3, 9, 29, 8, 12, 13, 25, 30, 15, 7, 24,
10, 6, 1, 24, 30, 6, 7, 10, 19, 16, 20, 29, 7, 11, 26, 12, 7, 25, 32, 30, 18,
22, 22, 22, 14, 27, 2, 32, 16, 18, 9, 27, 24, 8, 19, 26, 15, 15, 11, 23, 18,
27, 21, 16, 27, 15, 1, 18, 28, 3, 1, 8, 17, 27, 26, 30, 13, 8, 9, 15, 12, 12,
14, 11, 23, 17, 11, 28, 3, 15, 13, 8, 10, 21, 31, 19, 12, 15, 9, 11, 15, 28,
18, 17, 30, 7, 3, 2, 24, 13, 25, 1, 20, 1, 26, 9, 13, 31, 11, 29, 25, 7, 8, 11,
20, 1, 25, 22, 27, 10, 27, 17, 11, 2, 18, 30, 9, 13, 19, 15, 7, 10, 10, 24,
25, 5, 11, 31, 21, 11, 27, 15, 17, 32, 11, 4, 29, 1, 3, 11, 28, 7, 23, 23, 19,
13, 7, 12, 3, 21, 26, 1, 20, 17, 14, 27, 31, 20, 3, 6, 27, 14, 31, 24, 6, 24,
29, 20, 30, 13, 18, 2, 4, 1, 2, 20, 10, 16, 4, 9, 18, 15, 1, 22, 31, 29, 17, 5,
14, 21, 22, 27, 32, 11, 30, 9, 21, 15, 14, 11, 14, 15, 3, 11, 22, 32, 10, 13,
19, 23, 24, 9, 21, 17, 2, 23, 2, 13, 4, 32, 26, 20, 24, 16, 24, 5, 22, 5, 24,
5, 21, 7, 5, 23, 32, 21, 4, 23, 32, 9, 26, 9, 30, 11, 32, 7, 1, 28, 1, 29, 20,
23, 9, 2, 29, 32, 16, 11, 13, 9, 4, 9, 23, 31, 13, 24, 11, 18, 15, 30, 5, 11,
29, 23, 27, 2, 10, 30, 28, 22, 15, 7, 6, 1, 32, 22, 6, 8, 16, 22, 25, 3, 5, 4,
15, 24, 31, 3, 16, 7, 4, 5, 8, 28, 7, 22, 10, 8, 6, 8, 26, 27, 30, 10, 28, 30,
11, 25, 1, 21, 29, 15, 18, 23, 21, 26, 13, 18, 13, 15, 3, 22, 7, 9, 5, 9, 2,
22, 4, 10, 6, 15, 21, 16, 17, 6, 28, 4, 10, 27, 9, 22, 22, 22, 11, 31, 3, 24,
23, 1, 13, 13, 7, 13, 19, 11, 16, 31, 18, 7, 23, 28, 14, 24, 5, 30, 19, 24, 3,
2, 20, 2, 1, 24, 16, 26, 1, 31, 23, 12, 31, 12, 28, 25, 13, 18, 16, 3, 32, 2,
5, 24, 12, 24, 24, 8, 9, 10, 6, 29, 11, 13, 3, 2, 31, 12, 9, 8, 32, 16, 23, 27,
28, 11, 3, 7, 17, 22, 29, 3, 6, 24, 31, 27, 8, 25, 7, 13, 18, 27, 16, 7, 17, 5,
6, 30, 29, 9, 22, 11, 22, 5, 15, 24, 26, 30, 3, 5, 3, 27, 21, 11, 15, 7, 32,
10, 26, 9, 4, 25, 12, 14, 1, 26, 24, 18, 20, 13, 23, 24, 28, 12, 29, 4, 23, 8,
27, 32, 9, 1, 25, 11, 8, 1, 32, 29, 30, 3, 32, 26, 25, 16, 5, 29, 24, 17, 32,
3, 10, 25, 25, 30, 4, 20, 4, 15, 24, 26, 2, 24, 5, 2, 22, 3, 8, 9, 23, 25, 20,
1, 4, 7, 28, 18, 5, 31, 6, 25, 19, 24, 4, 29, 4, 16, 28, 18, 3, 32, 14, 32, 22,
13, 16, 11, 2, 21, 12, 19, 22, 30, 4, 18, 14, 25, 17, 22, 8, 4, 31, 24, 30, 7,
8, 32, 32, 19, 26, 18, 14, 16, 17, 31, 21, 11, 19, 6, 2, 21, 11, 29, 15, 3, 2,
30, 13, 11, 2, 17, 22, 6, 17, 4, 11, 12, 7, 2, 32, 24, 29, 16, 14, 15, 22, 12,
7, 15, 5, 20, 6, 10, 3, 7, 2, 25, 32, 26, 22, 18, 4, 11, 10, 6, 9, 8, 16, 13,
26, 4, 11, 23, 26, 2, 8, 17, 11, 28, 30, 8, 16, 17, 5, 31, 21, 5, 19, 15, 26,
1, 4, 7, 21, 23, 25, 9, 27, 5, 11, 10, 25, 9, 8, 5, 32, 10, 26, 21, 16, 31, 4,
8, 19, 20, 10, 16, 10, 1, 23, 32, 30, 25, 4, 2, 24, 9, 12, 12, 1, 5, 17, 2, 13,
13, 29, 32, 5, 11, 13, 18, 19, 22, 14, 8, 14, 3, 24, 9, 17, 13, 30, 22, 26, 1,
15, 21, 22, 18, 23, 30, 32, 13, 17, 19, 30, 27, 17, 25, 22, 2, 11, 4, 19, 15,
29, 17, 29, 15, 18, 8, 2, 19, 4, 3, 18, 22, 28, 30, 29, 4, 26, 6, 19, 2, 28,
23, 3, 17, 28, 8, 7, 22, 26, 11, 19, 28, 7, 4, 17, 3, 4, 13, 28, 4, 26, 27, 30,
19, 25, 30, 15, 16, 32, 12, 21, 23, 20, 19, 22, 11, 31, 10, 26, 29, 21, 9,
32, 20, 2, 32, 32, 8, 20, 18, 1, 1, 32, 21, 23, 5, 24, 11, 26, 19, 31, 5, 15,
26, 4, 6, 31, 28, 9, 26, 8, 19, 13, 22, 30, 20, 14, 21, 12, 7, 9, 3, 10, 4, 26,
22, 22, 11, 5, 30, 29, 29, 31, 24, 13, 22, 6, 11, 29, 27, 3, 18, 30, 11, 1, 2,
29, 23, 13, 25, 11, 22, 7, 31, 5, 16, 24, 30, 8, 10, 14, 23, 18, 25, 13, 5, 9,
9, 23, 23, 10, 26, 5, 13, 32, 8, 26, 11, 5, 3, 15, 20, 25, 5, 5, 27, 21, 22, 5,
5, 5, 21, 28, 20, 10, 30, 32, 22, 3, 26, 10, 5, 5, 28, 26, 30, 25, 6, 12, 30,
32, 28, 7, 9, 28, 10, 27, 26, 10, 27, 18, 30, 8, 11, 11, 1, 23, 22, 1, 31, 32,
31, 4, 23, 25, 3, 9, 1, 29, 4, 12, 20, 31, 29, 12, 27, 21, 28, 11, 4, 8, 18,
13, 11, 1, 22, 29, 20, 26, 24, 24, 11, 8, 16, 22, 12, 19, 21, 8, 31, 4, 32,
24, 11, 27, 6, 16, 28, 19, 22, 10, 11, 9, 20, 9, 5, 23, 23, 20, 29, 24, 12,
32, 26, 23, 30, 19, 18, 22, 29, 29, 6, 27, 13, 14, 28, 2, 18, 5, 6, 24, 5, 7,
13, 17, 27, 6, 15, 14, 4, 11, 3, 2, 20, 12, 21, 8, 28, 21, 10, 23, 11, 15, 32,
26, 23, 16, 11, 23, 22, 32, 17, 16, 28, 2, 20, 12, 20, 12, 11, 31, 13, 12,
25, 17, 8, 28, 23, 28, 12, 3, 15, 12, 7, 4, 25, 14, 12, 10, 31, 6, 6, 18, 21,
21, 12, 28, 3, 18, 1, 18, 2, 21, 16, 23, 4, 30, 30, 27, 29, 29, 11, 13, 12,
13, 10, 7, 10, 24, 31, 23, 28, 11, 23, 6]

PLAINTEXT = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" * 60


# letters
LETTERS = {
    "A":'11000',
    "B":'10011',
    "C":'01110',
    "D":'10010',
    "E":'10000',
    "F":'10110',
    "G":'01011',
    "H":'00101',
    "I":'01100',
    "J":'11010',
    "K":'11110',
    "L":'01001',
    "M":'00111',
    "N":'00110',
    "O":'00011',
    "P":'01101',
    "Q":'11101',
    "R":'01010',
    "S":'10100',
    "T":'00001',
    "U":'11100',
    "V":'01111',
    "W":'11001',
    "X":'10111',
    "Y":'10101',
    "Z":'10001'
}

# reverses the hashmap and returns the letter
def get_rev_hm_let(code):
    inv_map = {v: k for k, v in LETTERS.items()}
    return inv_map.get(code)

DIGITS = [[1,1,0,0,0],[1,0,0,1,1],[0,1,1,1,0],[1,0,0,1,0],[1,0,0,0,0],[1,0,1,1,0],
          [0,1,0,1,1],[0,0,1,0,1],[0,1,1,0,0],[1,1,0,1,0],[1,1,1,1,0],[0,1,0,0,1],
          [0,0,1,1,1],[0,0,1,1,0],[0,0,0,1,1],[0,1,1,0,1],[1,1,1,0,1],[0,1,0,1,0],
          [1,0,1,0,0],[0,0,0,0,1],[1,1,1,0,0],[0,1,1,1,1],[1,1,0,0,1],[1,0,1,1,1],
          [1,0,1,0,1],[1,0,0,0,1],[0,0,0,1,0],[0,1,0,0,0],[1,1,1,1,1],[1,1,0,1,1],
          [0,0,1,0,0],[0,0,0,0,0]]



plaintext_encoded = [LETTERS.get(p) for p in PLAINTEXT]

ciphertext_encoded = []
for x in range(len(CIPHERTEXT)):
    code = DIGITS[CIPHERTEXT[x]-1]
    code_string = ''.join([str(c) for c in code])
    ciphertext_encoded.append(code_string)

periods = [47, 53, 59, 61, 64, 65, 67, 69, 71, 73]

# XOR function
def XOR(input_1, input_2):
    result = ""
    for i in range(5):
        result += str((int(input_1[i])+int(input_2[i]))%2)
    return result

import pandas as pd

# possible relay control bit groups
data_weight_one = [['11xxx', '101xx', '1001x', False, False],
        ['x0xxx', 'x11xx', 'x101x', 'x1001', 'x1000'],
        [False, 'xx0xx', 'xx11x', 'xx101', 'xx100'],
        [False, False, 'xxx0x', 'xxx11', 'xxx10'],
        ['01xxx', '001xx', '0001x', False, False]
    ]
rows_weight_one = ['00001','00010','00100','01000','10000']
cols_weight_one = ['00001','00010','00100','01000','10000']

data_weight_four = data_weight_one.copy()

rows_weight_four = ['11110','11101','11011','10111','01111']
cols_weight_four = ['11110','11101','11011','10111','01111']


###TEST###
'''
def swap(_list, pos_a, pos_b):
    a, b = _list[pos_a], _list[pos_b]

    _list[pos_b] = a
    _list[pos_a] = b

    return _list

# relay box according to specifications
def relay_box(input_a, input_b):
    input_1, input_2 = input_a.copy(), input_b.copy()
    if input_2[0] == 0:
        input_1 = swap(input_1,0,4)
    if input_2[1] == 0:
        input_1 = swap(input_1,3,4)
    if input_2[2] == 0:
        input_1 = swap(input_1,2,3)
    if input_2[3] == 0:
        input_1 = swap(input_1,1,2)
    if input_2[4] == 0:
        input_1 = swap(input_1,0,1)

    return input_1

for i in rows_weight_one:
    print("\n")
    for j in range(32):
        bin_j = bin(j)[2:].zfill(5)
        res = relay_box(list(i), list(bin_j))
        res_str = ''.join([str(res[x]) for x in range(5)])
        if res_str in cols_weight_one:
            print(f"{i} -> ({bin_j}) -> {res_str}")
'''
###TEST###

df_weight_one = pd.DataFrame(data_weight_one, index=rows_weight_one,columns=cols_weight_one)
df_weight_four = pd.DataFrame(data_weight_four, index=rows_weight_four, columns=cols_weight_four)

# given the board with one missing bit, the plaintext at that position, and knowing whether
# the XOR result should be a 1-weight or 4-weight bit, its *easy* to find if the unknown
# bit should be one or zero
def find_missing(board, plaintext, weight):
    if weight == 1:

        correct_bit = None
        correct_bit_position = board.index('x')

        for i in range(5):
            if i != correct_bit_position and (int(board[i])+int(plaintext[i]))%2 == 1:
                correct_bit = plaintext[correct_bit_position]
                break
        if not correct_bit:
            correct_bit = 1 if plaintext[correct_bit_position] == '0' else 0

        return correct_bit

    if weight == 4:

        correct_bit = None

        correct_bit_position = board.index('x')
        for i in range(5):

            if i != correct_bit_position and (int(board[i])+int(plaintext[i]))%2 == 0:

                correct_bit = 1 if plaintext[correct_bit_position] == '0' else 0
                break
        if correct_bit == None:
            correct_bit = plaintext[correct_bit_position]

        return correct_bit

# turns the digits list into a dictionary mapping numbers 1,2,3... to their CCITT2 code at the j'th position
digits_hashmap = {}
for i, d in enumerate(DIGITS):
    string = ""
    for j in d:
        string+=str(j)
    digits_hashmap[i+1] = string


# reverses the hashmap and returns the number
def get_rev_hm_num(code):
    inv_map = {v: k for k, v in digits_hashmap.items()}
    return inv_map.get(code)